struct segtree{
    int n;
    vi t;
    segtree(int N){
        n = N;
        t.assign(4 * n, 0);
    }

    void build(int no, int lo, int hi, vi &x){
        if(lo == hi){
            t[no] = x[lo];
            return;
        }
        int mid = lo + (hi - lo) / 2;
        build(2*no, lo, mid, x);
        build(2*no+1, mid+1, hi, x);
        t[no] = t[2*no] + t[2*no+1];
    }

    void update(int no, int lo, int hi, int tar, int val){
        if(lo == hi){
            t[no] = val;
            return;
        }
        int mid = lo + (hi  - lo) / 2;
        if(tar <= mid){
            update(2*no, lo, mid, tar, val);
        }else{
            update(2*no+1, mid+1, hi, tar, val);
        }
        t[no] = t[2*no] + t[2*no+1];
    }
    int query(int no, int lo, int hi, int l, int r){
        if(l == lo && r == hi){
            return t[no];
        }
        int mid = lo + (hi - lo) / 2;
        if(r <= mid){
            return query(2*no, lo, mid, l, r);
        }else if(l > mid){
            return query(2*no+1, mid+1, hi, l, r);
        }else{
            return query(2*no, lo, mid, l, mid) + query(2*no+1, mid+1, hi, mid+1, r);
        }
    }
};
